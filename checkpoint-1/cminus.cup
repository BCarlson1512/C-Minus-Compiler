/*
    Created by: Ben Carlson, Conor Roberts
    File Name: cminus.cup
    Elements taken from Fei Song's C1 Package
*/

/* -- Preliminary Declarations Section --*/

import absyn.*;

/* modify error reporting within the parser */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;
:};

/* -- Declaration of Terminals and Non Terminals -- */

/* -- TERMINALS -- */

terminal IF, ELSE, INT, RETURN, VOID, WHILE, BOOL;
terminal EQ, LT, GT, LTE, GTE, EQEQ, NOTEQ;
terminal SEMI, COMMA;
terminal LEFT_SQ_BRAC, RIGHT_SQ_BRAC, LEFT_BRAC, RIGHT_BRAC,LEFT_CURLY_BRAC,RIGHT_CURLY_BRAC;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal Integer NUM;
terminal String ID;
terminal ERROR;

/* -- NON TERMINALS -- */

non terminal Var var, param;
non terminal VarDecList params;
non terminal ExpList program, declaration_list;
non terminal Exp declaration, if_stmt, repeat_stmt, assign_stmt, read_stmt, write_stmt;
non terminal Exp exp;   
non terminal Exp var_declaration,fun_declaration,fun_prototype;   

/* -- Grammar Section -- */

start with program;

program	          ::= declaration_list:s
                    {: RESULT = s; :}
                  ;

declaration_list  ::= declaration_list:d1 declaration:d2 
                    {: ExpList t = 1;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(d2, null);
                      RESULT = d1;
                    :}
                  | declaration:d
                    {: RESULT = new ExpList(d, null); :}
                  | error declaration:d
                    {: 
                        parser.report_error("invalid", null); 
                        RESULT = new ExpList(d, null); 
                    :}
                  ;

declaration       ::= var_declaration:v
                    {: RESULT = v :}
                  | fun_declaration:f
                   {: RESULT = f; :}
                  | fun_prototype:p
                    {: RESULT = p; :}
                  ;

var_declaration   ::= type_specifier:t ID:i
                    {: RESULT = new VarDec(tleft,tright, t, i); :} 
                  ;
  
type_specifier    ::= INT:i
                    {: RESULT = new Type(ileft, iright, Type.INT); :}
                  | BOOL:b
                    {: RESULT = new Type(bleft, bright, Type.BOOL); :}
                  | VOID:v
                    {: RESULT = new Type(vleft, vright, Type.VOID); :}
                  ;
                
fun_declaration   ::= type_specifier:t ID:i LEFT_BRAC params:p RIGHT_BRAC compound_stmt:c
                    {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); :}
                  ;

// TODO: Add function prototype
fun_prototype     ::= type_specifier:t ID:i LEFT_BRAC params:p RIGHT_BRAC SEMI
                    {: RESULT = t :}
                  ;

params            ::= param_list:pl 
                    {: RESULT = pl; :}
                    | VOID:v
                  ;

param_list        ::= param_list:pl COMMA param:p 
                    {: 
                      VarDecList t = pl;
                        while( t.tail != null )
                           t = t.tail;
                        t.tail = new VarDecList(p, null);
                        RESULT = pl;
                    :}
                    | param:p
                    {: RESULT = p; :}
                  ;

param             ::= type_specifier:t ID COMMA param:p 
                    {: RESULT = pl; :}
                  | type_specifier:t ID RIGHT_SQ_BRAC LEFT_SQ_BRAC 
                    {: RESULT = pl; :}
                  ;

compound_stmt     ::= LEFT_CURLY_BRAC local_declarations:ld statement_list:sl RIGHT_CURLY_BRAC  
                    {: RESULT = ld; :}
                  ;

local_declarations::= local_declarations:ld var_declaration:vd  
                    {: RESULT = ld; :}
                  | VOID:v 
                  ;

statement_list    ::= statement_list:sl statement:s
                    {: RESULT = sl; :}
                  | VOID:v 
                  ;
                
statement         ::= exp_stmt:es 
                    {: RESULT = es; :}
                  | compound_stmt:cs 
                    {: RESULT = cs; :}
                  | selection_stmt:ss 
                    {: RESULT = ss; :}
                  | iteration_stmt:is 
                    {: RESULT = is; :}
                  | return_stmt:rs 
                    {: RESULT = rs; :}
                  ;
                
exp_stmt          ::= exp:e SEMI 
                    {: RESULT = e; :}
                  | SEMI 
                  ;
                
selection_stmt    ::= IF LEFT_BRAC exp:e RIGHT_BRAC statement:s
                    {: RESULT = new IfExp(eleft, eright, e, s, null); :} 
                  | IF LEFT_BRAC exp:e RIGHT_BRAC statement:s1 ELSE statement:s2
                    {: RESULT = new IfExp(eleft, eright, e, s1, s2); :}
                  ;

iteration_stmt    ::= WHILE LEFT_BRAC exp:e RIGHT_BRAC statement:s
                    {: RESULT = new WhileExp(sleft, sright, e, s); :}
                  ;

return_stmt       ::= RETURN exp:e SEMI
                    {: RESULT = new ReturnExp(eleft, eright, e); :}
                  | RETURN SEMI:s
                    {: RESULT = new ReturnExp(sleft, sright, null); :}
                  ;
exp               ::= var:v EQ exp:e
                    {: RESULT = new AssignExp(vleft, vright, v, e); :}
                  | obool_exp:s
                    {: RESULT = s; :}
                  ;
var               ::= ID:i
                    {: RESULT = new VarExp(ileft, iright, i); :}
                  | ID:i LEFT_SQ_BRAC exp:e RIGHT_SQ_BRAC
                    {: RESULT = new ArrayVar(ileft, iright, i, e); :}
                  ;

obool_exp         ::= obool_exp:e1 OR abool_exp:e2
                    {: RESULT = new OpExp(e1left, e1right, s1, OpExp.OR, s2); :}
                  | abool_exp:a
                    {: RESULT = a; :}
                  ;

abool_exp         ::= abool_exp:e1 AND aexp:e2
                    {: RESULT = new OpExp(e1left, e1right, s1, OpExp.AND, s2); :}
                  | ubool_exp:u
                    {: RESULT = u; :}
                  ;

ubool_exp         ::= NOT ubool_exp:u
                    {: RESULT = new OpExp(uleft, uright, OpExp.NOT, u); :}
                  ;

simple_exp        ::= add_exp:a relop:r add_exp:b
                    {: RESULT = new OpExp(aleft, aright, a, r, b); :}
                  | add_exp:a
                    {: RESULT = a; :}
                  ;

relop             ::= LT
                    {: RESULT = OpExp.LT; :}
                  | GT
                    {: RESULT = OpExp.GT; :}
                  | EQEQ
                    {: RESULT = OpExp.EQEQ; :}
                  | LTE
                    {: RESULT = OpExp.LTE; :}
                  | GTE
                    {: RESULT = OpExp.GTE; :}
                  | NOTEQ
                    {: RESULT = OpExp.NOTEQ; :}
                  ;

add_exp           ::= add_exp:a addop:o term:t
                    {: RESULT = new OpExp(aleft, aright, a, o, t); :}
                  | term:t
                    {: RESULT = t; :}
                  ;

addop             ::= PLUS
                    {: RESULT = OpExp.PLUS; :}
                  | MINUS
                    {: RESULT = OpExp.MINUS; :}
                  ;

term              ::= term:t mulop:m signed_factor:f
                    {: RESULT = new OpExp(tleft, tright, t, m, f); :}
                  | signed_factor:f
                    {: RESULT = f; :}
                  ;

mulop             ::= TIMES
                    {: RESULT = OpExp.TIMES; :}
                  | DIVIDE
                    {: RESULT = OpExp.DIVIDE; :}
                  ;

signed_factor     ::= MINUS signed_factor:f
                    {: RESULT = f; :}
                  | factor:f
                    {: RESULT = f; :}
                  ;

factor            ::= LEFT_BRAC exp:e RIGHT_BRAC
                    {: RESULT = e; :}
                  | var:v
                    {: RESULT = v; :}
                  | call:c
                    {: RESULT = c; :}
                  | NUM:n
                    {: RESULT = new NumExp(nleft, nright, n); :}
                  | TRUE
                    {: RESULT = new BoolExp(1); :}
                  ;

call              ::= ID:i LEFT_BRAC args:a RIGHT_BRAC
                    {: RESULT = new CallExp(ileft, iright, i, a); :}
                  ;

args              ::= arg_list:a
                    {: RESULT = a; :}
                  | VOID:v
                    {: RESULT = null; :}
                  ;

arg_list          ::= arg_list:a COMMA exp:e
                    {: RESULT = a; :}
                  | exp:e
                    {: RESULT = new ExpList(eleft, eright, e, null); :}
                  ;
