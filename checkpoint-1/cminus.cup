/*
    Created by: Ben Carlson, Conor Roberts
    File Name: cminus.cup
    Elements taken from Fei Song's C1 Package
*/

/* -- Preliminary Declarations Section --*/

import absyn.*;

/* modify error reporting within the parser */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;
:};

/* -- Declaration of Terminals and Non Terminals -- */

/* -- TERMINALS -- */

terminal IF, ELSE, INT, RETURN, VOID, WHILE, UMINUS;
terminal EQ, LT, GT, LTE, GTE, EQEQ, NOTEQ, OR, AND, NOT;
terminal SEMI, COMMA;
terminal LEFT_SQ_BRAC, RIGHT_SQ_BRAC, LEFT_BRAC, RIGHT_BRAC,LEFT_CURLY_BRAC,RIGHT_CURLY_BRAC;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal Integer NUM;
terminal String ID;
terminal Boolean BOOL;
terminal String TRUTH;
terminal ERROR;

/* -- NON TERMINALS -- */

non terminal Var var;
non terminal VarDec var_declaration, param;
non terminal VarDecList params, param_list, local_declarations;
non terminal ExpList statement_list, args, arg_list;
non terminal Exp statement, exp_stmt, selection_stmt, iteration_stmt, return_stmt, call;
non terminal Exp exp;   
non terminal Type type_specifier;
non terminal CompoundExp compound_stmt;

non terminal Dec declaration, fun_declaration;
non terminal DecList program, declaration_list;


/* PRECEDENCE */

precedence left AND;
precedence left OR;

precedence right EQ;
precedence nonassoc LT, GT, LTE, GTE, EQEQ, NOTEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE; 
precedence left BOOL;
precedence left ELSE, INT, SEMI, VOID;

/* -- Grammar Section -- */

start with program;

program	          ::= declaration_list:s
                    {: RESULT = s; :}
                  | ERROR 
                  {: RESULT= null; :}
                  ;

declaration_list  ::= declaration_list:d1 declaration:d2 
                    {: DecList t = d1;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new DecList(d2, null);
                      RESULT = d1;
                    :}
                  | declaration:d
                    {: RESULT = new DecList(d, null); :}
                  | error declaration:d
                    {: 
                        parser.report_error("invalid declaration", null); 
                        RESULT = new DecList(d, null); 
                    :}
                  |
                  {: RESULT = new DecList(null, null); :}
                  ;

declaration       ::= var_declaration:v
                    {: RESULT = v; :}
                  | fun_declaration:f
                   {: RESULT = f; :}
                  ;

var_declaration   ::= type_specifier:t ID:i SEMI
                    {: RESULT = new SimpleDec(tleft,tright, t, i); :}
                  | type_specifier:t ID:i LEFT_SQ_BRAC NUM:n RIGHT_SQ_BRAC SEMI
                    {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(ileft, iright, n)); :}
                  | type_specifier:t ID:i error:e 
                    {: 
                       parser.report_error("Invalid variable declaration: missing semi", null);
                       RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(ileft, iright, 0));
                    :}
                  | type_specifier:t ID:i LEFT_SQ_BRAC error:e  RIGHT_SQ_BRAC SEMI
                    {: 
                       parser.report_error("Invalid variable declaration: invalid array size", null); 
                       RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(ileft, iright, 0));
                    :}
                  ;
  
type_specifier    ::= INT:i
                    {: RESULT = new Type(ileft, iright, Type.INT); :}
                  | BOOL:b
                    {: RESULT = new Type(bleft, bright, Type.BOOL); :}
                  | VOID:v
                    {: RESULT = new Type(vleft, vright, Type.VOID); :}
                  ;
                
fun_declaration   ::= type_specifier:t ID:i LEFT_BRAC params:p RIGHT_BRAC compound_stmt:c
                    {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); :}
                  | type_specifier:t ID:i LEFT_BRAC params:p RIGHT_BRAC SEMI
                    {: RESULT = new FunctionDec(tleft, tright, t, i, p, null); :}
                  ;

params            ::= param_list:pl 
                    {: RESULT = pl; :}
                    | VOID:v
                  ;

param_list        ::= param_list:pl COMMA param:p 
                    {: 
                      VarDecList t = pl;
                        while( t.tail != null )
                           t = t.tail;
                        t.tail = new VarDecList(p, null);
                        RESULT = pl;
                    :}
                    | param:p
                    {: RESULT = new VarDecList(p, null); :}
                  ;

param             ::= type_specifier:t ID:i 
                    {: RESULT = new SimpleDec(tleft, tright, t, i); :}
                  | type_specifier:t ID:i RIGHT_SQ_BRAC LEFT_SQ_BRAC 
                    {: RESULT = new ArrayDec(tleft, tright, t, i, null); :}
                  ;

compound_stmt     ::= LEFT_CURLY_BRAC:lc local_declarations:ld statement_list:sl RIGHT_CURLY_BRAC:rc  
                    {: RESULT = new CompoundExp(lcleft, lcright, ld, sl); :}
                  ;

local_declarations::= local_declarations:ld var_declaration:vd  
                    {: RESULT = new VarDecList(vd, ld); :}
                  | 
                  ;

/*                   var_declaration: v
                  {: RESULT = new VarDecList(v, null); :}
                  | error:e var_declaration:v
                  {:
                    parser.report_error ("Syntax error in local declarations", e);
                    RESULT = new VarDecList(v, null);
                  :}
*/

statement_list    ::= statement_list:sl statement:s
                    {: RESULT = new ExpList(s, sl); :}
                  | 
                  ;
                
statement         ::= exp_stmt:es 
                    {: RESULT = es; :}
                  | compound_stmt:cs 
                    {: RESULT = cs; :}
                  | selection_stmt:ss 
                    {: RESULT = ss; :}
                  | iteration_stmt:is 
                    {: RESULT = is; :}
                  | return_stmt:rs 
                    {: RESULT = rs; :}
                  | error:e SEMI
                    {: 
                      parser.report_error("Invalid statement", e);
                      RESULT = new ReturnExp(eleft, eright, new NilExp(eleft, eright));
                    :}
                  ;
                
exp_stmt          ::= exp:e SEMI 
                    {: RESULT = e; :}
                  | SEMI 
                  ;
                
selection_stmt    ::= IF LEFT_BRAC exp:e RIGHT_BRAC statement:s
                    {: RESULT = new IfExp(eleft, eright, e, s, null); :} 
                  | IF LEFT_BRAC exp:e RIGHT_BRAC statement:s1 ELSE statement:s2
                    {: RESULT = new IfExp(eleft, eright, e, s1, s2); :}
                  ;

iteration_stmt    ::= WHILE LEFT_BRAC exp:e RIGHT_BRAC statement:s
                    {: RESULT = new WhileExp(sleft, sright, e, s); :}
                  ;

return_stmt       ::= RETURN:r SEMI
                    {: RESULT = new ReturnExp(rleft, rright, null); :}
                  | RETURN exp:e SEMI:s
                    {: RESULT = new ReturnExp(eleft, eright, e); :}
                  ;

exp              ::= exp:s1 LT exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); :}
                  | exp:s1 GT exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); :}
                  | exp:s1 EQEQ exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.EQEQ, s2); :}
                   | var:s1 EQ exp:s2
                 {: 
                  VarExp v = new VarExp(s1left, s1right, s1);
                  RESULT = new AssignExp(s1left, s1right, v, s2);
                  :}
                  | exp:s1 NOTEQ exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.NOTEQ, s2); :}
                  | exp:s1 LTE exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LTE, s2); :}
                  | exp:s1 GTE exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2); :}
                  | exp:s1 PLUS exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.PLUS, s2); :}
                  | exp:s MINUS exp:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.MINUS, t); :}
                  | exp:t TIMES exp:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, f); :}
                   | exp:t DIVIDE exp:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.DIVIDE, f); :}
                   | exp:e1 OR exp:e2
                 {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OR, e2); :}
                   | exp:e1 AND exp:e2
                 {: RESULT = new OpExp(e1left, e1right, e1, OpExp.AND, e2); :}
                   | NOT exp:u
                 {: RESULT = new OpExp(uleft, uright, null, OpExp.NOT, u); :}
                  | MINUS:m exp:f
                 {: RESULT = new OpExp(mleft, mright, null, OpExp.UMINUS, f); :}
                 %prec UMINUS
                  | LEFT_BRAC exp:e RIGHT_BRAC
                 {: RESULT = e; :}
                  | var:v
                {: RESULT = new VarExp(vleft,vright,v); :}
                  | call:c
                {: RESULT = c; :}
                  | NUM:n
                {: RESULT = new IntExp(nleft, nright, n); :}
                  | TRUTH:b
                {: RESULT = new BoolExp(bleft,bright,Boolean.parseBoolean(b)); :}
                  | error:e
                {: 
                  parser.report_error("Invalid expression", e);
                  RESULT = new ReturnExp(eleft, eright, new NilExp(eleft, eright));
                :}
               ;


var               ::= ID:i
                    {: RESULT = new SimpleVar(ileft, iright, i); :}
                  | ID:i LEFT_SQ_BRAC exp:e RIGHT_SQ_BRAC
                    {: RESULT = new IndexVar(ileft, iright, i, e); :}
                  ;


call              ::= ID:i LEFT_BRAC args:a RIGHT_BRAC
                    {: RESULT = new CallExp(ileft, iright, i, a); :}
                  ;

args              ::= arg_list:a
                    {: RESULT = a; :}
                  |
                  ;

arg_list          ::= arg_list:a COMMA exp:e
                    {: ExpList t = a;
                     while( t.tail != null )
                        t = t.tail;
                     t.tail = new ExpList(e, null);
                     RESULT = a;
                    :}
                  | exp:e
                    {: RESULT = new ExpList(e, null); :}
                  ;
